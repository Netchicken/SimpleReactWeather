{"version":3,"sources":["Api.js","fiveDaysWeather.js","tools.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["api","key","base","FiveDaysWeather","props","state","forecast","fiveDayList","this","list","console","log","className","map","item","index","ToDate","date","newDate","Date","monthName","getMonth","dayName","getDay","hour","getHours","amPm","getDate","GetForecastDate","dt_txt","left","Card","style","backgroundColor","CardTitle","CardSubtitle","wind","speed","CardText","Math","round","main","temp","Component","Home","useState","query","setQuery","weather","setWeather","fiveDays","setFiveDays","type","placeholder","onChange","e","target","value","onKeyPress","evt","fetch","then","res","json","getCurrentWeather","result","getFiveDaysWeather","name","sys","country","d","day","month","year","getFullYear","dateBuilderTool","temp_min","temp_max","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAQA,IAAMA,EAAM,CACVC,IARK,mCASLC,KALK,4C,qDC2DQC,E,YAnDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAUF,EAAME,UAHD,E,sEAQjB,IAAIC,EAAcC,KAAKJ,MAAME,SAASG,KAMtC,MAJ2B,qBAAhBF,GACTG,QAAQC,IAAI,eAAgBJ,GAI5B,yBAAKK,UAAU,aACb,yBAAKA,UAAU,OACU,oBAAfL,EACJA,EAAYM,KAAI,SAACC,EAAMC,GACrB,IAAMC,ECMf,SAAyBC,GAC9B,IAgBMC,EAAU,IAAIC,KAAKF,GACzBP,QAAQC,IAAIO,GACZ,IAAME,EAlBS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAMuBF,EAAQG,YACjCX,QAAQC,IAAIS,GAEZ,IAAME,EAPO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAOnCJ,EAAQK,UAC7Bb,QAAQC,IAAIW,GAEZ,IAAME,EAAON,EAAQO,WACjBC,EAAO,KAMX,OALeA,EAAZF,EAAO,GAAW,KAAkB,KAEvCd,QAAQC,IAAIa,GAEMJ,EAAY,IAAKF,EAAQS,UAAa,IAAML,EAAU,IAAME,EAAOE,EDrCxDE,CAAgBd,EAAKe,QAEpC,OACE,kBAAC,IAAD,CAAYC,MAAI,GACd,yBAAKlB,UAAU,0BAA0BX,IAAKc,GAC5C,kBAACgB,EAAA,EAAD,CACEnB,UAAU,WACVoB,MAAO,CACLC,gBAAiB,8BAGnB,kBAACC,EAAA,EAAD,KAAYlB,GACZ,kBAACmB,EAAA,EAAD,KACG,IACA,eACArB,EAAKsB,KAAKC,MAHb,OAKA,kBAACC,EAAA,EAAD,CAAU1B,UAAU,eACjB2B,KAAKC,MAAM1B,EAAK2B,KAAKC,MADxB,eAQV,S,GA7CgBC,aEqEfC,MA5Ef,WAAiB,IAAD,EACYC,mBAAS,mBADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGkBJ,mBAAS,IAH3B,mBAGPK,EAHO,KAGGC,EAHH,KAwBd,MAJwB,qBAAbD,GACTxC,QAAQC,IAAI,qBAAsBuC,GAIlC,yBACEtC,UACyB,oBAAhBoC,EAAQP,MACXO,EAAQP,KAAKC,KAAO,GAClB,WAEF,OAGN,8BACE,yBAAK9B,UAAU,cACb,2BACEwC,KAAK,OACLxC,UAAU,aACVyC,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACjCA,MAAOX,EACPY,WArCK,SAAAC,GACG,UAAZA,EAAI1D,MHGL,SAA2B6C,GAChC,OAAOc,MAAM,GAAD,OACP5D,EAAIE,KADG,qBACc4C,EADd,+BAC0C9C,EAAIC,MACxD4D,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UGLdC,CAAkBlB,GAAOe,MAAK,SAAAI,GAC5BhB,EAAWgB,MHSZ,SAA4BnB,GACjC,OAAOc,MAAM,GAAD,OACP5D,EAAIE,KADG,sBACe4C,EADf,+BAC2C9C,EAAIC,MACzD4D,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UGRdG,CAAmBpB,GAAOe,MAAK,SAAAI,GAC7Bd,EAAYc,WAgCY,oBAAhBjB,EAAQP,KACd,6BACE,yBAAK7B,UAAU,gBACb,yBAAKA,UAAU,YACZoC,EAAQmB,KADX,KACmBnB,EAAQoB,IAAIC,SAE/B,yBAAKzD,UAAU,QDxDtB,SAAyB0D,GAC9B,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAE/C,UACbN,EAAOqD,EAAE3C,UACT6C,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBF,EAAEjD,YACjBoD,EAAOH,EAAEI,cAEb,MAAM,GAAN,OAAUH,EAAV,YAAiBtD,EAAjB,YAAyBuD,EAAzB,YAAkCC,GC0BCE,CAAgB,IAAIxD,QAE7C,yBAAKP,UAAU,eACb,yBAAKA,UAAU,QAAQ2B,KAAKC,MAAMQ,EAAQP,KAAKC,MAA/C,SACA,yBAAK9B,UAAU,WACZ2B,KAAKC,MAAMQ,EAAQP,KAAKmC,UAD3B,WAC2C,IACxCrC,KAAKC,MAAMQ,EAAQP,KAAKoC,UAF3B,SAIA,yBAAKjE,UAAU,WAAWoC,EAAQA,QAAQ,GAAGP,MAC7C,yBAAK7B,UAAU,cAInB,GAEF,6BACE,wBAAIA,UAAU,YAAd,8BAEA,kBAAC,EAAD,CAAiBN,SAAU4C,QCvDtB4B,G,uLAVX,OACE,yBAAKlE,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmE,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,mBAAmBC,UAAW9E,U,GANlCwC,c,QCMEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.286cbd6d.chunk.js","sourcesContent":[" function This(){\r\nreturn \"3f2e5dbaf5cf57927bf90f6b1acf3206\";\r\n};\r\n\r\n function That(){\r\nreturn \"https://api.openweathermap.org/data/2.5/\";\r\n};\r\n\r\nconst api = {\r\n  key: This(),\r\n  base: That()\r\n};\r\n\r\n//current weather\r\nexport function getCurrentWeather(query) {\r\n  return fetch(\r\n    `${api.base}weather?q=${query}&units=metric&APPID=${api.key}`\r\n  ).then(res => res.json());\r\n}\r\n\r\n//five days weather\r\n//https://openweathermap.org/forecast5\r\nexport function getFiveDaysWeather(query) {\r\n  return fetch(\r\n    `${api.base}forecast?q=${query}&units=metric&APPID=${api.key}`\r\n  ).then(res => res.json());\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { GetForecastDate } from \"./tools\";\r\nimport { Card, CardText, CardTitle, CardSubtitle } from \"reactstrap\";\r\nimport LightSpeed from \"react-reveal/LightSpeed\"; //https://www.react-reveal.com/examples/common/lightspeed/\r\n\r\n//https://stackoverflow.com/questions/58333288/how-do-i-use-js-include-and-replace-inside-a-map-in-reactjs\r\n\r\n//https://html5hive.org/creating-a-react-and-reactstrap-card-gallery/\r\n//https://reactstrap.github.io/components/card/\r\n\r\n//https://openweathermap.org/forecast5#JSON\r\n\r\nclass FiveDaysWeather extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      forecast: props.forecast\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let fiveDayList = this.props.forecast.list;\r\n\r\n    if (typeof fiveDayList !== \"undefined\") {\r\n      console.log(\"fiveDayList \", fiveDayList);\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          {typeof fiveDayList != \"undefined\"\r\n            ? fiveDayList.map((item, index) => {\r\n                const ToDate = GetForecastDate(item.dt_txt);\r\n\r\n                return (\r\n                  <LightSpeed left>\r\n                    <div className=\"col col-md-3 col-sm-6  \" key={index}>\r\n                      <Card\r\n                        className=\"cardBody\"\r\n                        style={{\r\n                          backgroundColor: \" rgba(255, 255, 255, 0.2)\"\r\n                        }}\r\n                      >\r\n                        <CardTitle>{ToDate}</CardTitle>\r\n                        <CardSubtitle>\r\n                          {\" \"}\r\n                          {\" wind speed \"}\r\n                          {item.wind.speed}m/s\r\n                        </CardSubtitle>\r\n                        <CardText className=\"conditions \">\r\n                          {Math.round(item.main.temp)}°c\r\n                        </CardText>\r\n                      </Card>\r\n                    </div>\r\n                  </LightSpeed>\r\n                );\r\n              })\r\n            : \"\"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//}\r\nexport default FiveDaysWeather;\r\n// list: Array(40)\r\n// 0:\r\n// dt: 1579208400\r\n// main: {temp: 20.97, feels_like: 16.74, temp_min: 16.69, temp_max: 20.97, pressure: 1022, …}\r\n// weather: [{…}]\r\n// clouds: {all: 40}\r\n// wind:\r\n//speed: 7.92\r\n//deg: 59\r\n// sys: {pod: \"d\"}\r\n// dt_txt: \"2020-01-16 21:00:00\"\r\n","export function dateBuilderTool(d) {\r\n  let months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n  ];\r\n  let days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\"\r\n  ];\r\n\r\n  let day = days[d.getDay()];\r\n  let date = d.getDate();\r\n  let month = months[d.getMonth()];\r\n  let year = d.getFullYear();\r\n\r\n  return `${day} ${date} ${month} ${year}`;\r\n}\r\n\r\n// ISO 8601 Extended format\r\n// `YYYY-MM-DDTHH:mm:ss:sssZ`\r\n\r\n//2020-01-20 03:00:00\r\n//https://css-tricks.com/everything-you-need-to-know-about-date-in-javascript/\r\nexport function GetForecastDate(date) {\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n  ];\r\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n  const newDate = new Date(date);\r\n  console.log(newDate); //Mon Jan 20 2020 00:00:00 GMT+1300 (New Zealand Daylight Time)\r\n  const monthName = months[newDate.getMonth()];\r\n  console.log(monthName);\r\n\r\n  const dayName = days[newDate.getDay()]; // Thu\r\n  console.log(dayName);\r\n\r\n  const hour = newDate.getHours();\r\n  let amPm = \"am\";\r\n  if(hour > 12) {amPm =\"pm\" }else{ amPm= \"am\"};\r\n\r\n  console.log(hour);\r\n\r\n  const finalDate = monthName + \" \" +newDate.getDate() +  \" \" + dayName + \" \" + hour + amPm;\r\n  return finalDate;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { dateBuilderTool } from \"./tools\";\r\nimport { getCurrentWeather, getFiveDaysWeather } from \"./Api\";\r\nimport FiveDaysWeather from \"./fiveDaysWeather\";\r\n\r\nfunction Home() {\r\n  const [query, setQuery] = useState(\"Christchurch,NZ\");\r\n  const [weather, setWeather] = useState({});\r\n  const [fiveDays, setFiveDays] = useState({});\r\n\r\n  const search = evt => {\r\n    if (evt.key === \"Enter\") {\r\n      getCurrentWeather(query).then(result => {\r\n        setWeather(result);\r\n        // setQuery(\"\");\r\n        //    console.log(result);\r\n      });\r\n      getFiveDaysWeather(query).then(result => {\r\n        setFiveDays(result);\r\n        // setQuery(\"\");\r\n        //console.log(\"fivedays\",result);\r\n      });\r\n    }\r\n  };\r\n\r\n  if (typeof fiveDays !== \"undefined\") {\r\n    console.log(\"fivedays in return\", fiveDays);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.main != \"undefined\"\r\n          ? weather.main.temp > 16\r\n            ? \"app warm\"\r\n            : \"app\"\r\n          : \"app\"\r\n      }\r\n    >\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search...\"\r\n            onChange={e => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {typeof weather.main != \"undefined\" ? (\r\n          <div>\r\n            <div className=\"location-box\">\r\n              <div className=\"location\">\r\n                {weather.name}, {weather.sys.country}\r\n              </div>\r\n              <div className=\"date\">{dateBuilderTool(new Date())}</div>\r\n            </div>\r\n            <div className=\"weather-box\">\r\n              <div className=\"temp\">{Math.round(weather.main.temp)}°c</div>\r\n              <div className=\"weather\">\r\n                {Math.round(weather.main.temp_min)}°c to{\" \"}\r\n                {Math.round(weather.main.temp_max)}°c\r\n              </div>\r\n              <div className=\"weather\">{weather.weather[0].main}</div>\r\n              <div className=\"weather\"></div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div>\r\n          <h2 className=\"fivedays\"> Five Day Weather Forecast</h2>\r\n\r\n          <FiveDaysWeather forecast={fiveDays} />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport FiveDaysWeather from \"./fiveDaysWeather\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/fiveDaysWeather\" component={FiveDaysWeather} />\n        </Switch>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n//https://levelup.gitconnected.com/a-guide-to-service-workers-in-react-js-82aec1d6a22d read this!!!\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}